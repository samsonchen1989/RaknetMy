//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace RakNet {

public class UDPProxyServer : PluginInterface2 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal UDPProxyServer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(RakNetPINVOKE.UDPProxyServer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UDPProxyServer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UDPProxyServer() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RakNetPINVOKE.delete_UDPProxyServer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static UDPProxyServer GetInstance() {
    global::System.IntPtr cPtr = RakNetPINVOKE.UDPProxyServer_GetInstance();
    UDPProxyServer ret = (cPtr == global::System.IntPtr.Zero) ? null : new UDPProxyServer(cPtr, false);
    return ret;
  }

  public static void DestroyInstance(UDPProxyServer i) {
    RakNetPINVOKE.UDPProxyServer_DestroyInstance(UDPProxyServer.getCPtr(i));
  }

  public UDPProxyServer() : this(RakNetPINVOKE.new_UDPProxyServer(), true) {
  }

  public void SetSocketFamily(ushort _socketFamily) {
    RakNetPINVOKE.UDPProxyServer_SetSocketFamily(swigCPtr, _socketFamily);
  }

  public void SetResultHandler(UDPProxyServerResultHandler rh) {
    RakNetPINVOKE.UDPProxyServer_SetResultHandler(swigCPtr, UDPProxyServerResultHandler.getCPtr(rh));
  }

  public bool LoginToCoordinator(RakString password, SystemAddress coordinatorAddress) {
    bool ret = RakNetPINVOKE.UDPProxyServer_LoginToCoordinator(swigCPtr, RakString.getCPtr(password), SystemAddress.getCPtr(coordinatorAddress));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetServerPublicIP(RakString ip) {
    RakNetPINVOKE.UDPProxyServer_SetServerPublicIP(swigCPtr, RakString.getCPtr(ip));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public UDPForwarder udpForwarder {
    set {
      RakNetPINVOKE.UDPProxyServer_udpForwarder_set(swigCPtr, UDPForwarder.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = RakNetPINVOKE.UDPProxyServer_udpForwarder_get(swigCPtr);
      UDPForwarder ret = (cPtr == global::System.IntPtr.Zero) ? null : new UDPForwarder(cPtr, false);
      return ret;
    } 
  }

}

}
